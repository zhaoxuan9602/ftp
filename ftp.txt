ftp 文件服务器思路分析
1.技术点分析
* 并发模型  多线程并发模式
* 数据传输  tcp传输
2.结构设计
* 客户端发起请求,打印请求提示界面
* 文件传输功能封装为类
3.功能分析
*网络搭建
*查看文件库信息
*下载文件
*上传文件
*客户端退出
4.协议
L 表示请求文件列表
Q 表示退出
G 表示下载
P 表示上传
--------------------------------------------------------------------------
1.对重点代码进行熟悉
2.对ftp 文件服务器进行思路梳理
3.复习http 协议和 httpserver 1
--------------------------------------------------------------------------
服务端:
"""
    ftp 文件服务器
    并发网络功能训练
"""

from socket import *
from threading import Thread
import os,time

# 全局变量
ADDR = ("176.215.155.161",8888)
FTP = "/home/tarena/ftp/" # 文件库路径

#将客户端请求功能封装为类
class FtpServer:
    def __init__(self,connfd,FTP_PATH):
        self.connfd = connfd
        self.path = FTP_PATH
    def do_list(self):
        #获取文件列表
        files = os.listdir(self.path)
        if not files:
            self.connfd.send("该文件类别为空".encode())
            return
        else:
            self.connfd.send(b"OK")
            time.sleep(0.1)
        fs = ""
        for file in files:
            if file[0] != "." and \
                    os.path.isfile(self.path+file):
                fs +=file + '\n'#人为添加消息边界,防止粘包
        self.connfd.send(fs.encode())

    def do_get(self,filename):
        try :
            fd = open(self.path +filename,'rb')
        except Exception:
            self.connfd.send("文件不存在".encode())
            return
        else:
            self.connfd.send(b"OK")
            time.sleep(0.1)
        while True:
            data = fd.read(1024)
            if  not data:
                time.sleep(0.1)
                self.connfd.send(b"##")
                break
            self.connfd.send(data)
    def do_put(self,filename):
        if  os.path.exists(self.path+filename):
            self.connfd.send("该文件已存在".encode())
            return
        self.connfd.send(b"OK")
        fd = open(self.path+filename,'wb')
        while True:
            data = self.connfd.recv(1024)
            if data == b"##":
                break
            fd.write(data)
        fd.close()

def handle(connfd):
    # 选择文件夹
    cls = connfd.recv(1024).decode()
    FTP_PATH = FTP +cls +'/'
    ftp =FtpServer(connfd,FTP_PATH)
    while True:
        # 接收客户端请求
        data = connfd.recv(1024).decode()
        # 如果客户端断开返回data 为空
        if not data or data[0] == "Q":
            return
        elif data[0] == "L":#只有一个字母所以第一个字母就是L
            ftp.do_list()
        elif data[0] == "G":
            filename = data.split(" ")[-1]
            ftp.do_get(filename)
        elif data[0] == "P":
            filename = data.split(" ")[-1]
            ftp.do_put(filename)

#网络搭建
def main():
    s = socket(AF_INET,SOCK_STREAM)
    s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
    s.bind(ADDR)
    s.listen(5)
    print("Listen the port 8888 ...")
    while True:
        try:
            connfd, addr = s.accept()
        except KeyboardInterrupt:
            print("退出服务程序")
            return
        except Exception as e:
            print(e)
            continue  # 退到try
        print("连接的客户端:",addr)
        # 创建新的线程处理客户端请求
        client = Thread(target=handle, args=(connfd,))
        client.setDaemon(True)  # 不能用join是因为要循环接收客户端请求,设置分之线程随主线程退出
        client.start()

if __name__ == "__main__":
    main()
__________________________________________________________________________
客户端:
from socket import *
import sys
import time

# 具体功能
class FtpClient:
    def __init__(self,sockfd):
        self.sockfd = sockfd
    def do_list(self):
        self.sockfd.send(b"L")#发送请求
        # 等待回复
        data = self.sockfd.recv(128).decode()
        if data == "OK":
            # 文件大小设置很大时可能一次接收完成,用循环会导致阻塞
            data = self.sockfd.recv(4096)
            print(data.decode())
        else:
            print(data)
    def do_quit(self):
        self.sockfd.send(b"Q")
        self.sockfd.close()
        sys.exit("谢谢使用")

    def  do_get(self,filename):
        self.sockfd.send(("G "+filename).encode())
        data = self.sockfd.recv(128).decode()
        if data == "OK":
            fd = open(filename,'wb')
            #接收内容写入文件
            while True:
                data = self.sockfd.recv(1024)
                if  data == b"##":
                    break
                fd.write(data)
            fd.close()
        else:
            print(data)


    def do_put(self,filename):
        try:
            fd = open(filename,'rb')
        except Exception:
            print("没有该文件")
            return
        filename= filename.split('/')[-1]
        self.sockfd.send(("P" + filename).encode())
        data = self.sockfd.recv(128).decode()
        if data == 'OK':
            while True:
                data = fd.read(1024)
                if not data:
                    time.sleep(0.1)
                    self.sockfd.send(b"##")
                    break
                self.sockfd.send(data)
            fd.close()
        else:
            print(data)
# 发起请求
def request(sockfd):
    ftp = FtpClient(sockfd)
    while True:
        print("\n*******************命令选项**************************")
        print("*********************view list**********************")
        print("*********************get file***********************")
        print("*********************put file***********************")
        print("*********************** quit ***********************")
        print("****************************************************")
        cmd = input("请输入您的骚操作选项:")
        if cmd.strip() == 'view list':
            ftp.do_list()
        elif cmd.strip()[:3] == "get":
            filename = cmd.strip().split(' ')[-1]
            ftp.do_get(filename)
        elif cmd.strip()[:3] == 'put':
            filename = cmd.strip().split(' ')[-1]
            ftp.do_put(filename)
        elif cmd.strip() == 'quit':
            ftp.do_quit()

# 网络连接

def main():
    ADDR = ('176.215.155.161',8888)
    sockfd = socket()
    try:
        sockfd.connect(ADDR)
    except Exception as e:
        print("连接服务器失败")
        return
    else:
        print('****************************************************')
        print('data                    file                   image')
        print('****************************************************')
        cls = input("请输入文件种类")
        if cls not in ['data','file','image']:
            print("Sorry input Error")
            return
        else:
            sockfd.send(cls.encode())
            request(sockfd)# 发起具体请求

if __name__ == "__main__":
    main()
-------------------------------------------------------------------------
# 人为添加消息边界,防止粘包
# 只有在循环发送和 循环接收时才可用if not data 判断,否则会阻塞